##### Explicit and Implicit #####

C# is a statically-typed language, which means that everything has a type at compile-time. 
Assigning a value to a name is referred to as defining a variable.
A variable can be defined either by explicitly specifying its type, or by letting the C# compiler infer its type based on the assigned value (known as type inference).
Therefore, the following two variable definitions are equivalent:

int explicitVar = 10; // Explicitly typed
var implicitVar = 10; // Implicitly typed

_____________________________________________________________________________________________________________________________________________
##### Upadte a variable value in C# #####

Updating a variable's value is done through the = operator. Once defined, a variable's type can never change.

var count = 1; // Assign initial value
count = 2;     // Update to new value

// Compiler error when assigning different type
// count = false;

______________________________________________________________________________________________________________________________________________
#### C# functions , class key word , new keyword #####

C# is an object-oriented language and requires all functions to be defined in a class.
The class keyword is used to define a class.
Objects (or instances) are created by using the new keyword.


class Calculator
{
    // ...
}

var calculator = new Calculator();

______________________________________________________________________________________________________________________________________________
 
#### Methods , 0 or more parameters , all parameters are explicitly types and also return type , public access modifier ####

A function within a class is referred to as a method. Each method can have zero or more parameters.
All parameters must be explicitly typed, there is no type inference for parameters.(i.e var concept)
Similarly, the return type must also be made explicit.
Values are returned from methods using the return keyword.
To allow a method to be called by code in other files, the public access modifier must be added.

class Calculator
{
    public int Add(int x, int y)
    {
        return x + y;
    }
}


______________________________________________________________________________________________________________________________________________
#### Method invocation in C# the dot operator ####

Methods are invoked using dot (.) syntax on an instance, specifying the method name to call and passing arguments for each of the method's parameters.
Arguments can optionally specify the corresponding parameter's name.

var calculator = new Calculator();
var sum_v1 = calculator.Add(1, 2);
var sum_v2 = calculator.Add(x: 1, y: 2);


______________________________________________________________________________________________________________________________________________

#### Local and Global Scope in C# ####

Scope in C# is defined between the { and } characters.

______________________________________________________________________________________________________________________________________________
C# supports two types of comments. Single line comments are preceded by // and multiline comments are inserted between /* and */.
